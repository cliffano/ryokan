---
- hosts: delllatitude00

  vars:
    docker_images:
      - { id: aembuildenv, image: 'shinesolutions/aem-platform-buildenv' }
    main_workspaces:
      - control
    project_workspaces:
      - bussaoc
      - bussdig
      - busspla
      - bussint
      - busstun
    nvm_node_version: "16.13.2"
    nvm_dir: "{{ home }}/tools/nvm"
    nvm_user_name: cliffano
    nvm_install_globally: ['nestor', 'repoman'] 
    docker_images:
      - { id: centos7, image: 'centos:centos7' }
      - { id: ubuntu, image: 'ubuntu' }
      - { id: aembuildenv, image: 'shinesolutions/aem-platform-buildenv' }
      - { id: theworksbuildenv, image: 'shinesolutions/the-works-buildenv' }
  roles:
    - { role: grzegorznowak.nvm_node, become: yes }
    - { role: andrewrothstein.packer }
    - { role: andrewrothstein.terraform }
    - { role: rvm.ruby, rvm1_rubies: ['ruby-2.7.5', 'ruby-3.1.0'], rvm1_user: 'cliffano', rvm1_gpg_key_server: 'hkp://keyserver.ubuntu.com' }

  tasks:

  - name: Ensure nvm directory exists
    file: path={{ home }}/tools/nvm state=directory

  - name: Set git config
    file: src={{ home }}/dev/workspace-control/config/tools/git/.gitconfig-{{ inventory_hostname }} dest='{{ home }}/.gitconfig' state=link

  - name: Set git config for GitHub repos
    file: src={{ home }}/dev/workspace-control/config/tools/git/.gitconfig-{{ inventory_hostname }}-github dest='{{ home }}/.gitconfig-github' state=link

  - name: Set git config for BitBucket repos
    file: src={{ home }}/dev/workspace-control/config/tools/git/.gitconfig-{{ inventory_hostname }}-bitbucket dest='{{ home }}/.gitconfig-bitbucket' state=link

  - name: Ensure SSH directory exists
    file: path={{ home }}/.ssh/ state=directory

  - name: Ensure SSH config directory exists
    file: path={{ home }}/.ssh/config.d/ state=directory

  - name: Set SSH configuration
    file: src={{ home }}/dev/workspace-control/config/tools/ssh/{{ item }} dest={{ home }}/.ssh/{{ item }} state=link mode=0600
    with_items:
      - config

  - name: Set project workspaces SSH configuration include
    file: src={{ home }}/dev/workspace-control/config/workspaces/{{ item }}/.ssh_config dest={{ home }}/.ssh/config.d/config-{{ item }} state=link
    with_items: "{{ project_workspaces }}"

  - name: Ensure utility OS packages are installed
    become: yes
    ansible.builtin.package:
      name:
        - curl
        - git
        - python3-pip
        - telnet
        - vim
        - wget
        - wsl
      state: latest

  - name: Ensure Python packages are installed
    ansible.builtin.pip:
      name:
        - awscli
        - docker
        - docker-compose
      executable: pip3
      state: latest

  # - name: Install Docker, adapted from https://docs.docker.com/engine/install/ubuntu/
  #   become: yes
  #   shell: |
  #     apt-get update
  #     apt-get remove -y docker docker.io containerd runc
  #     DEBIAN_FRONTEND="noninteractive"  apt-get install -y ca-certificates curl gnupg lsb-release
  #     curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  #     echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  #     apt-get update
  #     DEBIAN_FRONTEND="noninteractive" apt-get install -y docker-ce docker-ce-cli containerd.io

  # - name: Pull Docker images
  #   become: yes
  #   community.docker.docker_image:
  #     name: "{{ item }}"
  #     source: pull
  #   with_items:
  #     - centos:centos7
  #     - ubuntu
  #     - shinesolutions/the-works-buildenv
  #     - shinesolutions/aem-platform-buildenv

  - name: Set Docker one-off aliases
    lineinfile: dest={{ home }}/.profile regexp="^alias drno-{{ item.id }}=.*$" line="alias drno-{{ item.id }}='sudo docker run --rm --workdir /opt/workspace -v /var/run/docker.sock:/var/run/docker.sock -v `pwd`:/opt/workspace -v ~/.aws:/root/.aws -i -t -e USER=$USER -e HOSTNAME=$HOSTNAME {{ item.image }}'" state=present backup=no
    with_items: "{{ docker_images }}"

  - name: Ensure main workspace directories exist
    file: path={{ home }}/dev/workspace-{{ item }} state=directory mode=0755
    with_items: "{{ main_workspaces }}"

  - name: Set Repoman configuration for main workspace repositories
    ansible.builtin.copy: src={{ home }}/dev/workspace-control/config/workspaces/{{ item }}/.repoman.json dest={{ home }}/dev/workspace-{{ item }}/.repoman.json mode='0644'
    with_items: "{{ main_workspaces }}"

  - name: Ensure project workspace directories exist
    file: path={{ home }}/dev/workspace-{{ item }} state=directory mode=0755
    with_items: "{{ project_workspaces }}"

  - name: Set Repoman configuration for project workspace repositories
    ansible.builtin.copy: src={{ home }}/dev/workspace-control/config/workspaces/{{ item }}/.repoman.json dest={{ home }}/dev/workspace-{{ item }}/.repoman.json mode='0644'
    with_items: "{{ project_workspaces }}"
  
  - name: Set alias for AWS credentials sync down
    lineinfile: dest={{ home }}/.profile regexp="^alias aws-cred-sync=.*$" line="alias aws-cred-sync='sudo cp /root/.aws/credentials /home/cliffano/.aws/credentials && sudo chown cliffano:cliffano /home/cliffano/.aws/credentials'"
